
// create and use the databse
// if there is not database it will create it
// otherwise it will createit
use test
db.createCollection("aircraft");
db.aircraft.insertMany([
    {
        "code": "1b7ad0de-5836-489b-9791-5a81a51cdb81",
        "model" : "Boeing 737-400",
        "minRunwayLength" : 1700,
        "range": 3500,
        "capacity": 189
    },
    {
        "code": "eede6be6-f716-4e2e-bf81-885f0a16a50c",
        "model" : "Boeing 737-800",
        "minRunwayLength" : 2500,
        "range": 5765,
        "capacity": 200
    },
    {
        "code": "1b7ad0de-5836-489b-9791-5a81a51cdb81",
        "model" : "Airbus A320",
        "minRunwayLength" : 2500,
        "range": 6000,
        "capacity": 150
    },
    {
        "code": "a3faaef2-fe54-4949-928f-be93584da471",
        "model" : "Airbus A319",
        "minRunwayLength" : 2255,
        "range": 6900,
        "capacity": 124
    },
    {
        "code": "eede6be6-f716-4e2e-bf81-885f0a16a50c",
        "model" : "Boeing 737-900",
        "minRunwayLength" : 2975,
        "range": 5600,
        "capacity": 215
    },
    {
        "code": "51192f6b-9c26-4ef9-b843-cf241f326091",
        "model" : "Embraer E-175",
        "minRunwayLength" : 1261,
        "range": 4000,
        "capacity": 80
    },
    {
        "code": "00126a63-f342-4ccd-ba86-4a7beecf10c0",
        "model" : "Airbus A350",
        "minRunwayLength" : 3200,
        "range": 15000,
        "capacity": 300
    },
    {
        "code": "4f356f56-84dd-484f-a5f7-b960dfba5823",
        "model" : "Boeing 747",
        "minRunwayLength" : 3100,
        "range": 14000,
        "capacity": 467
    },
    {
        "code": "0c3a60d6-8c99-472e-bf23-c1e689c5f6eb",
        "model" : "ATR 72",
        "minRunwayLength" : 1000,
        "range": 3218,
        "capacity": 78
    }
])

db.createCollection("crew");
db.crew.insertMany([
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 2"
    },
    {
        "name": "John Doe 3"
    },
    {
        "name": "John Doe 4"
    },
    {
        "name": "John Doe 5"
    },
    {
        "name": "John Doe 6"
    },
    {
        "name": "John Doe 7"
    },
    {
        "name": "John Doe 8"
    },
    {
        "name": "John Doe 9"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    },
    {
        "name": "John Doe 1"
    }
])


//db.createCollection("flights");
db.flights.insertMany([
    {
        "type": "International",
        "delayed": false,
        "duration": 150,
        "departureDate": new ISODate("2020-02-20T21:30:00Z"),
        "distanceKm": 1870,
        "departure": {
            "code": "CDG",
            "city": "Paris",
            "country": "France",
            "runwayLength": 4215,
            "location": {
                "type": "Point",
                "coordinates": [2.3, 48.8]
            }
        },
        "destination": {
            "code": "OTP",
            "city": "Bucharest",
            "country": "Romania",
            "runwayLength": 3500,
            "location": {
                "type": "Point",
                "coordinates": [26.1, 44.4]
            }
        },
        "aircraftCode": "1b7ad0de-5836-489b-9791-5a81a51cdb81",
        "crew": [
            {"name": "Renaud Cahun", "position": "Captain", "hoursSlept": 8},
            {"name": "Nina Peltier", "position": "Attendant", "nationality": "France", "hoursSlept": 6},
            {"name": "Lou Galopin", "position": "Attendant", "nationality": "France", "hoursSlept": 7}
        ]
    },
    {
        "type": "International",
        "delayed": false,
        "duration": 120,
        "departureDate": new ISODate("2020-02-20T21:20:00Z"),
        "distanceKm": 1730,
        "departure": {
            "code": "CDG",
            "city": "Paris",
            "country": "France",
            "runwayLength": 4215,
            "location": {
                "type": "Point",
                "coordinates": [2.3, 48.8]
            }
        },
        "destination": {
            "code": "LIS",
            "city": "Lisabon",
            "country": "Portugal",
            "runwayLength": 3805,
            "location": {
                "type": "Point",
                "coordinates": [-9.1, 38.7]
            }
        },
        "aircraftCode": "eede6be6-f716-4e2e-bf81-885f0a16a50c",
        "crew": [
            {"name": "Pierre Cotard", "position": "Captain", "nationality": "France", "hoursSlept": 4},
            {"name": "Amanda Lucas", "position": "Attendant", "hoursSlept": 6},
            {"name": "Joe Stan", "position": "Attendant", "nationality": "UK", "hoursSlept": 8}
        ]
    },
    {
        "type": "International",
        "delayed": true,
        "duration": 260,
        "departureDate": new ISODate("2020-02-20T23:00:00Z"),
        "distanceKm": 3200,
        "departure": {
            "code": "IST",
            "city": "Istanbul",
            "country": "Turkey",
            "runwayLength": 4100,
            "location": {
                "type": "Point",
                "coordinates": [28.9, 41.0]
            }
        },
        "destination": {
            "code": "LIS",
            "city": "Lisabon",
            "country": "Portugal",
            "runwayLength": 3805,
            "location": {
                "type": "Point",
                "coordinates": [-9.1, 38.7]
            }
        },
        "aircraftCode": "1b7ad0de-5836-489b-9791-5a81a51cdb81",
        "crew": [
            {"name": "Hakan Antal", "position": "Captain", "nationality": "Turkey", "hoursSlept": 5},
            {"name": "Anna Hassan", "position": "Attendant", "hoursSlept": 4},
            {"name": "Adina Popescu", "position": "Attendant", "hoursSlept": 9}
        ]
    },
    {
        "type": "Internal",
        "delayed": true,
        "duration": 80,
        "departureDate": new ISODate("2020-02-20T17:15:00Z"),
        "distanceKm": 400,
        "departure": {
            "code": "CDG",
            "city": "Paris",
            "country": "France",
            "runwayLength": 4215,
            "location": {
                "type": "Point",
                "coordinates": [2.3, 48.8]
            }
        },
        "destination": {
            "code": "LYS",
            "city": "Lyon",
            "country": "France",
            "runwayLength": 4000,
            "location": {
                "type": "Point",
                "coordinates": [4.8, 45.7]
            }
        },
        "aircraftCode": "51192f6b-9c26-4ef9-b843-cf241f326091",
        "crew": []
    },
    {
        "type": "Internal",
        "delayed": false,
        "duration": 65,
        "departureDate": new ISODate("2020-02-21T15:45:00Z"),
        "distanceKm": 470,
        "departure": {
            "code": "LYS",
            "city": "Lyon",
            "country": "France",
            "runwayLength": 4000,
            "location": {
                "type": "Point",
                "coordinates": [4.8, 45.7]
            }
        },
        "destination": {
            "code": "NIC",
            "city": "Nice",
            "country": "France",
            "runwayLength": 2570,
            "location": {
                "type": "Point",
                "coordinates": [7.2, 43.7]
            }
        },
        "aircraftCode": "a3faaef2-fe54-4949-928f-be93584da471",
        "crew": [
            {"name": "Patricia Mosar", "position": "Attendant", "hoursSlept": 7},
            {"name": "Jerome Trudeau", "position": "Attendant", "nationality": "France", "hoursSlept": 4}
        ]
    },
    {
        "type": "Internal",
        "delayed": false,
        "duration": 100,
        "departureDate": new ISODate("2020-03-21T11:10:00Z"),
        "distanceKm": 419,
        "departure": {
            "code": "MUC",
            "city": "Munich",
            "country": "Germany",
            "runwayLength": 4000,
            "location": {
                "type": "Point",
                "coordinates": [11.7, 48.3]
            }
        },
        "destination": {
            "code": "FRA",
            "city": "Frankfurt",
            "country": "Germany",
            "runwayLength": 4000,
            "location": {
                "type": "Point",
                "coordinates": [8.56, 50.0]
            }
        },
        "crew": [
            {"name": "Engel Wagner", "position": "Captain", "hoursSlept": 2},
            {"name": "Louise Baier", "position": "Attendant", "nationality": "Germany", "hoursSlept": 7}
        ]
    },
    {
        "type": "International",
        "delayed": false,
        "duration": 110,
        "departureDate": new ISODate("2020-03-22T14:10:00Z"),
        "distanceKm": 800,
        "departure": {
            "code": "MUC",
            "city": "Munich",
            "country": "Germany",
            "runwayLength": 4000,
            "location": {
                "type": "Point",
                "coordinates": [11.7, 48.3]
            }
        },
        "destination": {
            "code": "NIC",
            "city": "Nice",
            "country": "France",
            "runwayLength": 2570,
            "location": {
                "type": "Point",
                "coordinates": [7.2, 43.7]
            }
        },
        "aircraftCode": null,
        "crew": []
    }
])

// it will show all the collection inside a database

// MODULE 1
show collections;
show dbs; // show all the databases
db.aircraft.count() // count
db.aircraft.find({}) // find all
db.aircraft.find({},{model:1,range:1}) // give me all the model and range
db.aircraft.find({},{model:1,_id:0})   // give me the model and hide the _id
db.aircraft.find({},{model:1,_id:0}).limit(5)   // first five
db.aircraft.find({}).skip(2).limit(2)   // skip first 2 and give me the next 2 used for pagination
// sort // ascending
db.aircraft.find({}).sort({capacity:1});
// sort // descending
db.aircraft.find({}).sort({capacity:-1})
db.aircraft.find({}).sort({capacity:-1,range:-1})
db.flights.find({}).limit(1)
db.crew.find({}).count()
db.flights.find({}).count()
db.aircraft.find({}).count()


// MODULE 2

db.aircraft.find({});

//$eq  :equal
//$ne  : not equal
//$in  : filter in a range
//$nin : filter in a range (not in)
//$lt  : less than
//$lte : less than equal
//$gt  : greater than
//$gte : greater than equal



db.aircraft.find({model:"Boeing 737-900"})
db.aircraft.find({range:5600.00}) // it will works same as 5600 mongo will convert it
db.aircraft.find({underMaintenance:false}) // just to show that the boolean are also works. the field is not there


// query my date
db.flights.find({})


// not international
db.flights.find({
    type:{
        $ne:"International"
    }
})


// find all the flights that are not international and not Intercontinental

db.flights.find({
    type:{
        $nin:["International","Intercontinental"]
    }
})


db.flights.find({
    type:{
        $nin:["International","Intercontinental"]
    }
}).count()


// query by nested field
db.flights.find({
    "departure.code": "CDG"
  }).pretty()

// with object id

db.flights.findOne({
    _id: ObjectId("66d03617eb51b92ebc788b55")
})

db.flights.find({delayed:true,type:"International"},{_id:1,"departure.city":1,"destination.city":1})


db.flights.find({
    delayed:{$eq:true},
    type:{$eq:"International"},

},
{
    _id:1,
    "departure.city":1,
    "destination.city":1
})

db.flights.find({},{departureDate:1})

db.flights.findOne({
    departureDate: ISODate("2020-02-20T23:00:00Z")
  })



  // filtering day 2
  db.aircraft.find({model:"Boeing 737-900"},{code:1,model:1,range:1,_id:0})
  db.aircraft.find({range:5600})

  // find aircraft thats going to return after 2020-02-20 after 22 and before 23

  db.flights.find({
    departureDate:{
        $gt:ISODate("2020-02-20T15:00:00Z"),
        $lt:ISODate("2020-02-20T22:00:00Z"),

    }
  },{

  }).count()

  db.flights.find({
    departureDate:{
        $gte:ISODate("2020-02-20T22:00:00Z")
    }
  }).count()


  db.flights.find({}).count()

  db.flights.find({}).limit(4)

  db.flights.find({
    _id:ObjectId("66d0614362572419d2708050")
  })



  // find aircraft which has capacity more than 200

  db.aircraft.find({
    capacity:{
        $gt:200,
        $lt:300

    }
  })

db.aircraft.find({
    range:{
        $gte:5000,
        $lte:6000
    }
}).count()


// find all the delayed international flights after 2020-02-20. how many arr them 
// 


db.flights.find({
    delayed:{
        $eq: true
    },
    departureDate:{
        $gte:ISODate("2020-02-20")
    },
    type:{
        $eq:"International"
    }
},{_id:1})

db.flights.find({
    delayed:{
        $eq: true
    },
    departureDate:{
        $gt:ISODate("2020-02-20")
    },
    type:{
        $eq:"International"
    }
})



// in $in/ NOT in $nin

db.aircraft.find({
    model:{
        $in:["Airbus A350","Boeing 747"]
    }
},{
    _id:1
}).count()


db.aircraft.find({
    model:{
        $nin:["Airbus A350","Boeing 747"]
    }
},{
    _id:1
}).count()


db.aircraft.find({ 
},{
    _id:1
}).count()


db.aircraft.find({
    model:{
        $in:["Airbus A350","Boeing 747"]
    }
},{
   model:1
})

// suppose you aer using filter a field which also is a list
//  then array match will do the follow
// if any value from field list match the filter array . it will returrn value

db.flights.find({
    "departure.location.coordinates":{
        $in:[4.8,4.7,45.7]
    }
})


// find how many flights are there
// who departure from coordinates from any of [4.8,4.7,45.7]
// and destination to exactly [7.2,43.7]

db.flights.find({
    "departure.location.coordinates":{
        $in:[4.8,4.7,45.7]
    },
    "destination.location.coordinates":{
        $all:[7.2,43.7]
    }
})

// find how many flights are there
// who departure from coordinates from exactly of [4.8,45.7]
// and destination to exactly [7.2]

db.flights.find({
    "departure.location.coordinates":{
        $all:[4.8,45.7]
    },
    "destination.location.coordinates":{
        $in:[7.2]
    }
},{
    aircraftCode:1,
    _id:0
})



//  GEO Sepital query
// Suppose there is a bad weather in paris and we need to inform all
// flights who are near 10KM
// so first we have to find the flights list near 10KM
// and then find how many flights are there



// you have to tell the database that the coordinates
// are used for geo special locations
db.flights.createIndex({
    "departure.location": "2dsphere"
})

db.flights.getIndexes()



db.flights.find({
    "departure.location":{
        $near:{
            $geometry:{
                type:"Point",
                coordinates:[2.35,48.85]
            },
            $maxDistance:10000
        }
    }
},{
    aircraftCode:1,
    _id:0,
    "departure.location":1
})



// ADVANCE QUERY
// $and , $or


// find aircraft which has range greater than 3000 and less than 6000 (in between 3000 and 6000)

db.aircraft.find({
    $and:[
        {range:{
            $lt:6000
        }},
        {range:{
            $gt:3000
        }}
    ]
},{
    _id:0,
    aircraftCode:1,
    range:1
})


db.aircraft.find({
    $and:[
        {range:{
            $lt:6000
        }},
        {range:{
            $gt:3000
        }}
    ]
},{
    _id:0,
    aircraftCode:1,
    range:1
}).count()


// shorter syntax
// give the same result
db.aircraft.find({
    range:{
        $lt:6000,
        $gt:3000
    }
}).count()





// now find the aircraft code which has capacity less than 200 or range greater than 6000
///db.aircraft.find({})

db.aircraft.find({
    $or:[
        {
            capacity:{
                $gt:200
            }
        },
        {range:{
            $gt:6000
        }}

        ]
},{
    model:1,
    capacity:1,
    range:1
})

// find aircraft code that has capacity has less than 200 or greater than 300

db.aircraft.find({
    $or:[
        {capacity:{
            $lt:200
        }},
        {capacity:{
            $gt:300
        }}
    ]
},{
    model:1,
    capacity:1,
    _id:0
})


//Querying nested document
db.flights.find({})
// find all the flights that departure from Paris 

db.flights.find({
    "departure.city":"Paris"
},{
    "departure.country":1,
    _id:0
})



//working with unstructure data
// edge cases
// some data can be null,
// field might not be there
// same name but multiple data type

// find the null and where addres field 



// find all the document in 
// suppose the document is like this


// to test this lets insert three document

db.createCollection("home");
db.home.insertMany([
    {
        name: "Rahim Uddin",
        address: {
            city: "Paris",
            country: "France"
        }
    },
    {
        name: "Tanvir Rahman",
        address: "Bangladesh, Chattogram"
    },
    {
        name: "Abu Raihan"
    }
])

db.home.insertOne({
    name: "Tuhin ahmed",
    address: null
})

db.home.find({})

db.home.find({
    address:null
})
// it return two value 
//1) there is no field name addres
//2) there is a field name address but null in there
// so it returns two type of value
// this can cause confusion . This query result confusing



// if we want to find oly the field who has not address field . in this case one
// we can do that

db.home.find({
    address:{
        $exists:false
    }
})

// it will return only the document which has no address fields

// lets see the home collection again
db.home.find({})

// query all the dcument that has the address field

db.home.find({
    address:{
        $exists:true
    }
})


// now i will search the collection for document which has a address field
// and the address field must be an object

db.home.find({
    address:{
        $type: "object"
    }
})

db.home.find({
    address:{
        $type: "string"
    }
})


// it will return only null value 
db.home.find({
    address:{
        $type: "null"
    }
})



// Implimentating search mechanism with Mongodb

// Text index
// $text
// $ meta

// lets create a search engine


// lets create a collection and input some document
db.createCollection("profile");
db.profile.insertMany([
    {
        name: "Anna smith",
        skills: ["technical","management"]
    },
    {
        name: "Andrei Luca",
        skills: ["sales","management"]
    },
    {
        name: "Gukes babu",
        skills: ["networking","management"]
    },
    {
        name: "Magnus karlson",
        skills: ["programming","management"]
    },
    {
        name: "Tonmoy vatt",
        skills: ["programming","management"]
    },
    {
        name: "Devid letterman",
        skills: ["sales","programming"]
    }
])


// now lets apply the search mechanism

// create a text index
// first we have to create a index
db.profile.createIndex({
        name: "text",
        skills:"text"
    })


db.profile.find({})


db.profile.find({
    $text:{
        $search: "technical Anna"
    }
}
)

db.profile.find({
    $text:{
        $search: "Anna"
    }
}
)

db.profile.find({
    $text:{
        $search: "management magnus"
    }
}
)

db.profile.find({
    $text:{
        $search: " magnus"
    }
}
)

db.profile.find({
    $text:{
        $search: "magnus"
    }
}
)

db.profile.find({
    $text:{
        $search: " Gukes"
    }
}
)

// lets search the flights
db.aircraft.find({}).limit(1)


// make everything an index
db.aircraft.createIndex({
    "$**":"text"
})

db.aircraft.getIndexes()

db.aircraft.find({})

db.aircraft.find({
    $text:{
        $search:"Airbus"
    }
})


db.flights.createIndex({
    "$**":"text"
})

db.flights.getIndexes()

db.flights.find({})

db.flights.find({
    $text:{
        $search:"Paris"
    }
},{
    score:{
        $meta:"textScore"
    }
})


//relevance 
// mongodb give every matching query a score
// then we can sort by the score
// its logical to think that the greater the score
// greater the relevance

db.profile.find({
    $text:{
        $search: "management magnus"
    }
},{
    score:{
        $meta:"textScore"
    }
}
).sort({
    score:{
        $meta:"textScore"
    }
})


// new requirments

// find all the flights that depart from Paris

db.flights.find({
    "departure.city":"Paris"
},{"departure.city":1})


// find all the flights thta meet all the condition
///- duration less than 2 hours
///- internal flights 
db.flights.find({
   $and:[
    {
        duration:{
            $lt:120
        }
    },
    {
        type:{
            $ne:"International"
        }
    }
   ]
},{
    duration:1,
    type:1
})

db.flights.find({
    aircraftCode:{
        $exists:true
    }
})

db.flights.find({
    aircraftCode:{
        $exists:true
    }
}).count()

db.flights.find({
    aircraftCode:{
        $type:"string"
    }
}).count()


db.flights.find({
    aircraftCode:{
        $type:"string"
    }
})

db.flights.find({
    aircraftCode:{
        $type:"object"
    }
})

db.flights.find({
    aircraftCode:{
        $type:"null"
    }
})


db.flights.getIndexes()

db.flights.find({
    $text:{
        $search: "Paris Portugal"
    }
},{
    score:{
        $meta:"textScore"
    }
}).sort({
    score:{
        $meta:"textScore"
    }
})

db.flights.findOne({
    _id:ObjectId("66d693fe9ea08f3b32372fd8")
})


// working with arrays in mongoDB
// when we are working with arrray and we search in mongodb with find() command
// the order MATTERS the value MATTERS
// if the VALUE MATCH
// suppose you are searching like this

db.profile.find({

}).count()


// this query will go for every document and if in the skill
// array this "management" exists it will return that document

db.profile.find({
    skills:"management"
}).count()

// but if we search like this
// it will return 0
// why?
// because it is looking an exact array match

db.profile.find({
    skills:["management"]
}).count()

// if in the data there are like ["management","sales"]
// it will not match
// even if you search for ["sales","management"]
// and the data is different order like ["management","sales"]
// this will also not going to match.
// ORDER MATTERNS, VALUE OF THE ARRAY SOULD BE EXACT SAME AND EXACT ORDER
// but if you want to match regardless of the order you have to use a oparator
// all

db.profile.find({})


// if you search like this it will match with the document
// which has "technical" and "management"
// order dont matter  here
// but two of the sill must be there
// it is not like $or
// in $or either one is mathed then returned in $all everything needs to match
// order dont matter 
db.profile.find({
    skills:{
        $all:["technical","management"]
    }
})


// how many people have only two skills
// how many people have 1 skill

db.profile.find({
    skills:{
        $size:2
    }
}).count()


db.profile.find({
    skills:{
        $size:1
    }
}).count()



// total skills
db.profile.find({

}).count()

// now if the condition is multiple then what you are going todo
// we use elemMatch
db.profile.insertMany([{
    name:"John",
    skills:[
        {
            name : "tabletenis",
            lvl : 8
        },
        {
            name : "sprint",
            lvl : 4
        }
    ]
},
{
    name:"Tom",
    skills:[
        {
            name : "tabletenis",
            lvl : 2
        },
        {
            name : "swimming",
            lvl : 5
        }
    ]
},
{
    name:"Tom",
    skills:[
        {
            name : "shooting",
            lvl : 4
        },
        {
            name : "poll volt",
            lvl : 8
        }
    ]
}

])

db.profile.find({
    skills:{
        $elemMatch:{
            name:"tabletenis",
            lvl:{
                $lt:5
            }
        }
    }
}
)



// it will show only the skills
db.profile.find({

},{
    _id:0,
    skills:1
})

// what happend if you need the only first skills from the array

db.profile.find({

},{
    skills:{
        $slice:[0,1]
    }
})


// sysntax
//db.profile.find({

//},{
 //   skills:{
//        $slice:[start index,number_of_value_return_from_there]
//    }
//})

// what if i want the second element

db.profile.find({

},{
    skills:{
        $slice:[1,1]
    }
})


